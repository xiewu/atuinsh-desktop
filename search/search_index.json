{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-atuin-desktop","title":"Welcome to Atuin Desktop","text":"<p>Transform your operational workflows from scattered terminal commands into powerful, collaborative runbooks that actually execute.</p>"},{"location":"#what-is-atuin-desktop","title":"What is Atuin Desktop?","text":"<p>Atuin Desktop bridges the gap between documentation and automation. Create executable runbooks that combine rich documentation with live database queries, API calls, scripts, and terminal sessions - all in a collaborative, block-based editor.</p> <p>Early Beta</p> <p>We're still in early beta and things are changing fast! Your feedback helps shape the future of operational documentation.</p>"},{"location":"#why-atuin-desktop","title":"Why Atuin Desktop?","text":"<p>From Terminal to Team Workflow Stop copy-pasting commands from docs. Build runbooks that execute database queries, run scripts, make API calls, and manage infrastructure - then share them with your team.</p> <p>Intuitive Block-Based Editor Drag, drop, and rearrange content with a flexible editor designed specifically for operational workflows and automation.</p> <p>Real-time Collaboration Work together on incident response, deployment procedures, and maintenance tasks with live editing and execution.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Ready to create your first runbook?</p> <ul> <li> <p> Getting Started Guide</p> <p>Learn the basics of runbooks, blocks, and creating your first automated workflow.</p> <p> Get Started</p> </li> <li> <p> Explore Blocks</p> <p>Discover all the interactive components you can add to your runbooks.</p> <p> Browse Blocks</p> </li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#desktop-application","title":"Desktop Application","text":"<p>Download Atuin Desktop from our releases page </p>"},{"location":"#cli-integration","title":"CLI Integration","text":"<p>Atuin Desktop works best with the Atuin History CLI for enhanced terminal integration:</p> <pre><code>curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh\n</code></pre> <p> Full CLI Documentation</p>"},{"location":"#explore-the-docs","title":"Explore the Docs","text":"<ul> <li> <p> Database Blocks</p> <p>Connect to MySQL, PostgreSQL, ClickHouse, and SQLite databases.</p> <p> Database Blocks</p> </li> <li> <p> Executable Blocks</p> <p>Run scripts, execute commands, and automate workflows.</p> <p> Executable Blocks</p> </li> <li> <p> Templating</p> <p>Create dynamic, reusable runbooks with variables.</p> <p> Templating Guide</p> </li> <li> <p> Atuin Hub</p> <p>Share and collaborate on runbooks with your team.</p> <p> Collaboration Features</p> </li> </ul>"},{"location":"#common-use-cases","title":"Common Use Cases","text":"<p>Whether you're documenting incident response procedures, onboarding new engineers, automating deployment workflows, or managing infrastructure maintenance, Atuin Desktop makes it easy to structure and execute operational knowledge.</p> <p>Ready to get started? Jump into our Getting Started Guide to create your first executable runbook!</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#getting-started-with-atuin-desktop","title":"Getting Started with Atuin Desktop","text":"<p>Welcome to Atuin Desktop! This guide will help you understand runbooks and get you up and running quickly.</p>"},{"location":"getting-started/#what-are-runbooks","title":"What are Runbooks?","text":"<p>A runbook is a living document that combines documentation with executable automation. Think of it as your operations playbook that can actually do things, not just tell you what to do.</p> <p>Start with plain English and evolve your runbooks over time - from simple checklists and documentation, to workflows mixing manual steps with automated scripts, all the way to fully automated processes requiring minimal human intervention.</p> <p>Runbooks adapt to your workflow, not the other way around. Whether you're documenting incident response procedures, deployment workflows, or system maintenance tasks, Atuin Desktop scales with your needs.</p>"},{"location":"getting-started/#creating-your-first-runbook","title":"Creating Your First Runbook","text":""},{"location":"getting-started/#runbook-structure","title":"Runbook Structure","text":"<p>Every runbook starts with a name - this is simply the first text in your document, whether it's a heading or paragraph:</p> <pre><code># Database Maintenance Workflow\n</code></pre> <p>or</p> <pre><code>This runbook handles our weekly database cleanup tasks.\n</code></pre>"},{"location":"getting-started/#markdown-support","title":"Markdown Support","text":"<p>Our editor supports most standard Markdown syntax, so you can create rich documentation alongside your executable blocks:</p> <ul> <li>Headers for organization</li> <li>Lists for checklists  </li> <li>Code blocks for examples</li> <li>Links for references</li> <li>Tables for structured data</li> </ul>"},{"location":"getting-started/#working-with-blocks","title":"Working with Blocks","text":"<p>Blocks are the heart of Atuin Desktop - they're interactive components that can execute commands, query databases, make HTTP requests, and much more.</p>"},{"location":"getting-started/#creating-blocks","title":"Creating Blocks","text":"<p>To create a new block, simply type <code>/</code> anywhere in your runbook. This opens the block picker where you can choose from our extensive library of blocks organized into categories:</p> <ul> <li> Executable: Scripts, terminals, and command execution</li> <li> Databases: Query MySQL, PostgreSQL, ClickHouse, SQLite</li> <li> Network: HTTP requests, SSH connections  </li> <li> Monitoring: Prometheus metrics and system monitoring</li> </ul>"},{"location":"getting-started/#template-variables","title":"Template Variables","text":"<p>Make your runbooks dynamic with template variables:</p> <pre><code>{{var.environment}} - References a variable named \"environment\"\n{{env.DATABASE_URL}} - References an environment variable\n</code></pre> <p>For example, you can create flexible database queries:</p> <pre><code>SELECT * FROM users \nWHERE created_at &gt; '{{var.start_date}}'\nAND status = '{{var.user_status}}';\n</code></pre>"},{"location":"getting-started/#serial-execution","title":"Serial Execution","text":"<p>One of Atuin Desktop's most powerful features is serial execution - run your entire runbook automatically by clicking the play button in the top right.</p> <p>Terminal Block Caveat</p> <p>Terminal blocks must explicitly exit (include <code>exit</code> in your commands) for serial execution to continue automatically.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Ready to dive deeper? Explore our comprehensive block documentation:</p> <ul> <li>All Blocks Overview - Understand how blocks work and fit together</li> <li>Database Blocks - Connect to and query databases</li> <li>Executable Blocks - Run scripts and commands  </li> <li>Network Blocks - Make HTTP requests and SSH connections</li> <li>Templating System - Create dynamic, reusable runbooks</li> <li>Secrets Management - Handle credentials securely</li> </ul> <p>You now have everything you need to create your first runbook. Start simple with some documentation and a few blocks, then gradually add more automation as you become comfortable with the system.</p>"},{"location":"secrets/","title":"Secrets","text":""},{"location":"secrets/#secrets","title":"Secrets","text":"<p>We don't currently have any native integration for secrets storage and management.</p> <p>Using an executable block, it is easy to integrate third party secrets management solutions or fetch secrets from the local filesystem. For example:</p>"},{"location":"templating/","title":"Templating","text":""},{"location":"templating/#templating","title":"Templating","text":""},{"location":"templating/#templates","title":"Templates","text":"<p>Atuin uses MiniJinja for rendering templates, enabling flexible output customization.</p> <p>Basic Syntax</p> <ul> <li>Variables: <code>{{ var.variable_name }}</code></li> <li>Variables can be set by script.md blocks</li> <li>Filters: <code>{{ text | upper }}</code>, <code>{{ list | join(\", \") }}</code></li> <li>Conditionals:</li> </ul> <pre><code>{% if var.foo %}\necho \"foo is true\"\n{% else %}\necho \"foo is false\"\n{% endif %}\n</code></pre> <ul> <li>Loops:</li> </ul> <pre><code>{% for remote in [\"192.168.1.1\", \"192.168.1.2\"] %}\necho \"{{ remote }}\"\n{% endfor %}\n</code></pre> <p>Built-in Functions</p> <ul> <li><code>range(n)</code>: Generates a sequence \u2192 <code>{% for i in range(3) %}{{ i }}{% endfor %}</code></li> <li><code>length(list)</code>: Gets list length \u2192 <code>{{ length(users) }}</code></li> <li><code>default(value, fallback)</code>: Uses fallback if <code>None</code> \u2192 <code>{{ user.name | default(\"Guest\") }}</code></li> </ul> <p>Custom Filters</p> <ul> <li><code>shellquote</code>: Escapes a string for safe use in shell commands \u2192 <code>{{ var.text | shellquote }}</code></li> <li>Uses POSIX single-quote escaping to handle special characters like quotes, backticks, dollar signs, etc.</li> <li>Example: <code>echo {{ var.message | shellquote }}</code> safely handles any characters in the message variable</li> <li>Particularly useful when passing variables that might contain user input or special characters</li> </ul> <p>Example Usage</p> <p>Before (verbose manual escaping): </p><pre><code>echo \"{{ var.test | replace(\"\\\"\", \"\\\\\\\"\") }}\"\n</code></pre><p></p> <p>After (using shellquote filter): </p><pre><code>echo {{ var.test | shellquote }}\n</code></pre><p></p> <p>The <code>shellquote</code> filter handles all special shell characters automatically, including: - Single quotes (<code>'</code>) - Double quotes (<code>\"</code>) - Backticks (<code>`</code>) - Dollar signs (<code>$</code>) - And other shell metacharacters</p>"},{"location":"templating/#document-access","title":"Document access","text":"<p>The template system has full access to the entire document - blocks, text, etc.</p> <p>Warning</p> <p>We are still iterating on this API, and it is likely to change in future releases</p> <p>First, give a block a name. Click the pencil icon next to the default name in the top left.</p> <p>Then, it can be referred to via the <code>{{ doc.named }}</code>map, within the template system</p> An example using an editor block's content from another block, via the template system An example using an editor block's content from another block, via the template system"},{"location":"workspaces/","title":"Workspaces","text":"<p>Workspaces are the highest level container for runbooks. They can be found in the left sidebar in the Desktop app.</p> Operations, Internal Infra, and Meetings are all workspaces Operations, Internal Infra, and Meetings are all workspaces <p>You can create a new workspace one of three ways:</p> <ol> <li>Choose <code>File \u2192 Workspaces \u2192 New Workspace</code> from the application menu</li> <li>Choose \"New Workspace\" from the \"New Runbook\" dropdown arrow</li> <li>Right-click in an empty area of the sidebar and choose \"New Workspace\"</li> </ol> <p>Each workspace is either online or offline.</p>"},{"location":"workspaces/#online-workspaces","title":"Online Workspaces","text":"<p>Online workspaces are synced to Atuin Hub, and all runbooks added to them are automatically saved to the Hub. You must be online and logged in to the Hub to create or edit online workspaces, so check out the getting started guide for more information.</p> <p>Runbooks in online workspaces can be edited at the same time by multiple collaborators or team members; see the collaborative editing guide for more information.</p>"},{"location":"workspaces/#offline-workspaces","title":"Offline Workspaces","text":"<p>Offline workspaces are not synced to the Hub, and all runbooks added to them are saved locally on your device. When you create an offline workspace, you will be prompted to choose a folder on your device in which to store the runbooks.</p> <p>While offline runbooks cannot be edited collaboratively inside the editor like online runbooks can be, the workspace folder can be managed by Git or another VCS for version control, VCS-based collaboration, and backup.</p>"},{"location":"blocks/","title":"Blocks","text":""},{"location":"blocks/#blocks","title":"Blocks","text":"<p>Blocks are the interactive building components that make Atuin Desktop runbooks come alive. They're executable elements designed specifically for operations and automation workflows.</p>"},{"location":"blocks/#what-are-blocks","title":"What are Blocks?","text":"<p>Just as document editors let you embed interactive elements, Atuin Desktop blocks let you embed executable components into your runbooks. The key difference? Our blocks execute real commands, query live databases, and automate workflows - built specifically for DevOps, SRE, and operations teams.</p> <p>From Static to Interactive</p> <p>Traditional documentation:</p> <pre><code>1. SSH to the server: ssh user@prod-server\n2. Check disk usage: df -h\n3. Query the database: SELECT COUNT(*) FROM users;\n</code></pre> <p>Atuin Desktop runbook:</p> <ul> <li> SSH Block - Actually connects to your server</li> <li> Terminal Block - Runs <code>df -h</code> and shows real output  </li> <li> PostgreSQL Block - Executes the query and displays results in a table</li> </ul>"},{"location":"blocks/#how-blocks-work-together","title":"How Blocks Work Together","text":"<p>Blocks in a runbook share context and can pass data between each other, creating powerful automation workflows.</p>"},{"location":"blocks/#contextual-blocks","title":"Contextual Blocks","text":"<p>These blocks set the environment and context for subsequent blocks:</p> <ul> <li> Directory Block - Sets the working directory for all following blocks</li> <li> Environment Block - Defines environment variables</li> <li> Variable Block - Creates template variables for reuse</li> </ul> <p>Cascading Context</p> <p>When you set a directory with a Directory block, all subsequent Script, Terminal, and other executable blocks will run in that directory automatically.</p>"},{"location":"blocks/#executable-blocks","title":"Executable Blocks","text":"<p>These blocks perform actions, run commands, or retrieve data:</p> <ul> <li> Script Block - Executes code in various languages (bash, python, node)</li> <li> Terminal Block - Provides interactive terminal sessions</li> <li> Database Blocks - Query and manipulate databases</li> <li> HTTP Block - Make API requests and web calls</li> </ul>"},{"location":"blocks/#template-variables","title":"Template Variables","text":"<p>Blocks can capture output as variables and share data:</p> <pre><code># A Script block captures server info\n{{var.server_status}} \n\n# An HTTP block uses that data  \nPOST /alerts with body: {\"server\": \"{{var.server_status}}\"}\n</code></pre>"},{"location":"blocks/#block-examples","title":"Block Examples","text":""},{"location":"blocks/#terminal-block","title":"Terminal Block","text":"<p>Perfect for interactive debugging and exploration:</p> <pre><code># Check system resources\ntop -n 1\nfree -h\ndf -h\n</code></pre>"},{"location":"blocks/#script-block","title":"Script Block","text":"<p>Non-interactive execution with output capture for automation:</p> <pre><code># Check system status and capture output as variable\necho \"System: $(uname -s)\"\necho \"Load: $(uptime | awk -F'load average:' '{print $2}')\"\necho \"Memory: $(free -m | awk 'NR==2{printf \"%.1f%%\", $3*100/$2}')\"\necho \"Disk: $(df -h / | awk 'NR==2{print $5}')\"\n</code></pre> <p>Output gets saved to a variable and can be referenced in other blocks as <code>{{var.system_status}}</code></p>"},{"location":"blocks/#postgresql-block","title":"PostgreSQL Block","text":"<p>Query your databases directly in your runbooks:</p> <pre><code>SELECT \n    table_name,\n    pg_size_pretty(pg_total_relation_size(table_name::regclass)) as size\nFROM information_schema.tables \nWHERE table_schema = 'public'\nORDER BY pg_total_relation_size(table_name::regclass) DESC;\n</code></pre>"},{"location":"blocks/#directory-block","title":"Directory Block","text":"<p>Set context for file operations:</p> <pre><code>/var/log/myapp\n</code></pre> <p>Then all subsequent blocks run in that directory automatically.</p>"},{"location":"blocks/#block-categories","title":"Block Categories","text":"<ul> <li> <p> Database Blocks</p> <p>Connect to and query MySQL, PostgreSQL, ClickHouse, and SQLite databases directly from your runbooks.</p> <p> Explore Database Blocks</p> </li> <li> <p> Executable Blocks</p> <p>Run scripts, execute commands, manage environments, and automate workflows with powerful execution blocks.</p> <p> Explore Executable Blocks</p> </li> <li> <p> Network Blocks</p> <p>Make HTTP requests, establish SSH connections, and interact with remote systems and APIs.</p> <p> Explore Network Blocks</p> </li> <li> <p> Monitoring Blocks</p> <p>Query monitoring systems like Prometheus and integrate real-time metrics into your runbooks.</p> <p> Explore Monitoring Blocks</p> </li> </ul>"},{"location":"blocks/#getting-started-with-blocks","title":"Getting Started with Blocks","text":"<ol> <li>Create a block - Type <code>/</code> anywhere in your runbook to open the block picker</li> <li>Configure the block - Fill in connection details, queries, or commands  </li> <li>Use template variables - Make blocks dynamic with <code>{{var.name}}</code> syntax</li> <li>Chain blocks together - Use output from one block as input to another</li> <li>Run your workflow - Execute individual blocks or run the entire runbook</li> </ol>"},{"location":"blocks/databases/","title":"Database Blocks","text":""},{"location":"blocks/databases/#database-blocks","title":"Database Blocks","text":"<p>Database blocks allow you to integrate database querying with your runbook. All input fields are first run through the templating system, making it easy to parameterize your database operations.</p>"},{"location":"blocks/databases/#available-database-blocks","title":"Available Database Blocks","text":"<ul> <li> <p> ClickHouse</p> <p>Connect to ClickHouse databases for analytics and OLAP queries.</p> <p> Learn more</p> </li> <li> <p> MySQL</p> <p>Connect to MySQL databases with full SQL query support.</p> <p> Learn more</p> </li> <li> <p> PostgreSQL</p> <p>Connect to PostgreSQL databases with advanced features.</p> <p> Learn more</p> </li> <li> <p> SQLite</p> <p>Work with local SQLite databases for lightweight operations.</p> <p> Learn more</p> </li> </ul>"},{"location":"blocks/databases/clickhouse/","title":"ClickHouse","text":""},{"location":"blocks/databases/clickhouse/#clickhouse","title":"ClickHouse","text":"<p>The ClickHouse block allows you to connect to ClickHouse databases and execute queries directly within your runbook.</p>"},{"location":"blocks/databases/clickhouse/#connection","title":"Connection","text":"<p>Configure your ClickHouse connection using a standard ClickHouse HTTP URL:</p> <pre><code>http://username:password@host:8123/database\n</code></pre> <p>HTTP Protocol Only</p> <p>Currently, Atuin Desktop uses the ClickHouse HTTP interface (typically port 8123) and only supports connection via URL format. Individual connection parameters and the native TCP protocol are not supported at this time.</p>"},{"location":"blocks/databases/clickhouse/#query-execution","title":"Query Execution","text":"<p>Write and execute SQL queries against your ClickHouse database. Results are displayed in a table format within the runbook. ClickHouse excels at:</p> <ul> <li>Real-time analytics queries</li> <li>Time-series data analysis</li> <li>Aggregation over large datasets</li> <li>Column-oriented data processing</li> <li>Complex analytical functions</li> </ul> <p>Performance</p> <p>ClickHouse is optimized for analytical workloads and can handle queries over billions of rows efficiently.</p>"},{"location":"blocks/databases/clickhouse/#template-usage","title":"Template Usage","text":"<p>All input fields are first rendered by the templating system, allowing you to use variables in your queries and connection parameters.</p> <pre><code>SELECT \n    toStartOfDay(timestamp) as date,\n    count() as events\nFROM events \nWHERE timestamp &gt;= '{{var.start_date}}'\n  AND event_type = '{{var.event_type}}'\nGROUP BY date\nORDER BY date;\n</code></pre> <p>Time-Series Queries</p> <p>ClickHouse excels at time-series analysis. Use template variables to create flexible date ranges and filtering conditions.</p>"},{"location":"blocks/databases/clickhouse/#security","title":"Security","text":"<p>Consider using secrets for sensitive connection parameters like passwords to avoid storing credentials in plain text.</p> <p>Security Best Practices</p> <ul> <li>Never hardcode database passwords in runbooks</li> <li>Use read-only users for analytics queries</li> <li>Consider IP whitelisting for production ClickHouse instances</li> <li>Be mindful of query resource usage on shared clusters</li> </ul>"},{"location":"blocks/databases/mysql/","title":"MySQL","text":""},{"location":"blocks/databases/mysql/#mysql","title":"MySQL","text":"<p>The MySQL block allows you to connect to MySQL databases and execute queries directly within your runbook.</p>"},{"location":"blocks/databases/mysql/#connection","title":"Connection","text":"<p>Configure your MySQL connection using a standard MySQL connection URI:</p> <pre><code>mysql://username:password@host:port/database\n</code></pre> <p>URI Only</p> <p>Currently, MySQL blocks only support connection URI format. Individual connection parameters (host, port, etc.) are not supported at this time.</p> <p>MySQL blocks support SSL connections for secure database communication. Use SSL parameters in your connection URI (e.g., <code>?ssl-mode=required</code>).</p>"},{"location":"blocks/databases/mysql/#query-execution","title":"Query Execution","text":"<p>Write and execute SQL queries against your MySQL database. Results are displayed in a table format within the runbook. MySQL supports various SQL features including:</p> <ul> <li>Stored procedures and functions</li> <li>Views and temporary tables</li> <li>Joins and subqueries</li> <li>Aggregate functions and GROUP BY</li> <li>Full-text search with MATCH/AGAINST</li> </ul>"},{"location":"blocks/databases/mysql/#template-usage","title":"Template Usage","text":"<p>All input fields are first rendered by the templating system, allowing you to use variables in your queries and connection parameters.</p> <pre><code>SELECT * FROM users WHERE status = '{{var.user_status}}' \nAND created_date &gt; '{{var.start_date}}';\n</code></pre> <p>Use template variables to make your queries flexible and reusable across different environments or conditions.</p>"},{"location":"blocks/databases/mysql/#security","title":"Security","text":"<p>Consider using secrets for sensitive connection parameters like passwords to avoid storing credentials in plain text.</p> <p>Security Best Practices</p> <ul> <li>Never hardcode database passwords in runbooks</li> <li>Use read-only database users when possible</li> <li>Enable SSL/TLS encryption for production connections</li> <li>Be careful with data modification queries (UPDATE, DELETE, DROP)</li> </ul>"},{"location":"blocks/databases/postgresql/","title":"PostgreSQL","text":""},{"location":"blocks/databases/postgresql/#postgresql","title":"PostgreSQL","text":"<p>The PostgreSQL block allows you to connect to PostgreSQL databases and execute queries directly within your runbook.</p>"},{"location":"blocks/databases/postgresql/#connection","title":"Connection","text":"<p>Configure your PostgreSQL connection using a standard PostgreSQL connection URI:</p> <pre><code>postgresql://username:password@host:port/database\n</code></pre> <p>URI Only</p> <p>Currently, PostgreSQL blocks only support connection URI format. Individual connection parameters (host, port, etc.) are not supported at this time.</p>"},{"location":"blocks/databases/postgresql/#query-execution","title":"Query Execution","text":"<p>Write and execute SQL queries against your PostgreSQL database. Results are displayed in a table format within the runbook. PostgreSQL supports advanced SQL features like:</p> <ul> <li>Common Table Expressions (CTEs)</li> <li>Window functions</li> <li>JSON/JSONB operations</li> <li>Array operations</li> <li>Full-text search</li> </ul>"},{"location":"blocks/databases/postgresql/#template-usage","title":"Template Usage","text":"<p>All input fields are first rendered by the templating system, allowing you to use variables in your queries and connection parameters.</p> <pre><code>SELECT * FROM users WHERE created_at &gt; '{{var.start_date}}' \nAND department = '{{var.department}}';\n</code></pre> <p>Use template variables to create flexible queries that adapt based on runbook inputs or previous block outputs.</p>"},{"location":"blocks/databases/postgresql/#security","title":"Security","text":"<p>Consider using secrets for sensitive connection parameters like passwords to avoid storing credentials in plain text.</p> <p>Security Best Practices</p> <ul> <li>Never hardcode credentials in your runbooks</li> <li>Use environment variables or the secrets system</li> <li>Consider using read-only database users for monitoring queries</li> <li>Be cautious with queries that modify data (INSERT, UPDATE, DELETE)</li> </ul>"},{"location":"blocks/databases/sqlite/","title":"SQLite","text":""},{"location":"blocks/databases/sqlite/#sqlite","title":"SQLite","text":"<p>The SQLite block allows you to connect to SQLite databases and execute queries directly within your runbook.</p>"},{"location":"blocks/databases/sqlite/#connection","title":"Connection","text":"<p>Configure your SQLite connection using the database file path:</p> <ul> <li>Database Path - Full path to your SQLite database file (e.g., <code>/path/to/database.db</code>)</li> </ul> <p>SQLite is perfect for local development, testing, and lightweight applications that don't require a separate database server. SQLite databases are stored as single files on your filesystem, making them easy to backup, share, and version control.</p>"},{"location":"blocks/databases/sqlite/#query-execution","title":"Query Execution","text":"<p>Write and execute SQL queries against your SQLite database. Results are displayed in a table format within the runbook. SQLite supports most standard SQL features including:</p> <ul> <li>Transactions and ACID compliance</li> <li>Indexes and views</li> <li>Triggers and foreign keys</li> <li>Common table expressions (CTEs)</li> <li>JSON functions (in newer versions)</li> <li>Full-text search with FTS extensions</li> </ul>"},{"location":"blocks/databases/sqlite/#template-usage","title":"Template Usage","text":"<p>All input fields are first rendered by the templating system, allowing you to use variables in your queries and connection parameters.</p> <pre><code>SELECT * FROM logs \nWHERE level = '{{var.log_level}}' \nAND timestamp &gt; datetime('{{var.start_time}}');\n</code></pre> <p>You can also use template variables for database paths to switch between different database files:</p> <pre><code>Database Path: {{var.db_path}}/{{var.environment}}.db\n</code></pre>"},{"location":"blocks/databases/sqlite/#security","title":"Security","text":"<p>Consider using secrets for sensitive database file paths or if your SQLite database uses encryption.</p> <p>File Permissions</p> <ul> <li>Ensure proper file system permissions on your SQLite database files</li> <li>Be careful with database files in version control (consider using .gitignore)</li> <li>Use encrypted SQLite databases for sensitive data</li> <li>Regular backups are important since SQLite databases are single files</li> </ul>"},{"location":"blocks/executable/","title":"Executable Blocks","text":""},{"location":"blocks/executable/#executable-blocks","title":"Executable Blocks","text":"<p>Runbooks support a number of executable blocks. These blocks allow you to run scripts on your local machine, and are the building blocks of most workflows.</p> <p>While the execution context + state of a script or terminal block is isolated and independent, state is pushed down from the runbook. For instance, using a directory block, you can set the directory that all subsequent blocks should execute within.</p>"},{"location":"blocks/executable/#serial-execution","title":"Serial Execution","text":"<p>Runbooks also support \"serial execution\". Click the play button in the top right, and runbooks will execute each block in sequence automatically.</p> <p>Terminal Block Completion</p> <p>There is one small caveat for terminal blocks - they must exit. We cannot automatically determine if a terminal block has completed. You must either click the stop button yourself, or include \"exit\" somewhere in your input.</p>"},{"location":"blocks/executable/#available-executable-blocks","title":"Available Executable Blocks","text":"<ul> <li> <p> Directory</p> <p>Set the working directory for subsequent blocks in your runbook.</p> <p> Learn more</p> </li> <li> <p> Dropdown</p> <p>Create interactive dropdown selections for dynamic runbook execution.</p> <p> Learn more</p> </li> <li> <p> Environment</p> <p>Set environment variables for use in other blocks.</p> <p> Learn more</p> </li> <li> <p> Kubernetes</p> <p>Execute kubectl commands and manage Kubernetes resources.</p> <p> Learn more</p> </li> <li> <p> Script</p> <p>Run custom scripts in various languages (bash, python, etc.).</p> <p> Learn more</p> </li> <li> <p> Terminal</p> <p>Interactive terminal sessions for complex command sequences.</p> <p> Learn more</p> </li> <li> <p> Variable</p> <p>Define and manage template variables throughout your runbook.</p> <p> Learn more</p> </li> </ul>"},{"location":"blocks/executable/directory/","title":"Directory","text":""},{"location":"blocks/executable/directory/#directory","title":"Directory","text":"<p>This contextual block allows you to set the directory that all subsequent blocks should execute within.</p>"},{"location":"blocks/executable/directory/#path-types","title":"Path Types","text":"<p>The directory block supports three types of paths:</p> <ol> <li>Absolute paths: Start with <code>/</code> (e.g., <code>/Users/username/project</code>)</li> <li>Home-relative paths: Start with <code>~</code> (e.g., <code>~/Documents</code>)</li> <li>Relative paths: Any other path (e.g., <code>../sibling</code>, <code>subfolder</code>)</li> </ol> <p>Relative paths are resolved relative to: - The previous directory block, if one exists - The home directory (<code>~</code>) if no previous directory block exists</p>"},{"location":"blocks/executable/directory/#template-variables","title":"Template Variables","text":"<p>You can use template variables in directory paths:</p> <ul> <li><code>{{ workspace.root }}</code>: The absolute path to the workspace root (where <code>atuin.toml</code> is located). This is automatically looked up from the runbook's workspace and resolves to an empty string in online workspaces.</li> <li>Any custom variables defined in var blocks</li> </ul>"},{"location":"blocks/executable/directory/#examples","title":"Examples","text":"<pre><code># Absolute path\n/Users/username/my-project\n\n# Home-relative path\n~/projects/my-app\n\n# Relative to workspace root\n{{ workspace.root }}/src\n\n# Relative to previous directory\n../sibling-directory\n</code></pre>"},{"location":"blocks/executable/dropdown/","title":"Dropdown","text":""},{"location":"blocks/executable/dropdown/#dropdown","title":"Dropdown","text":"<p>The dropdown block allows you to select from a list of options, with three different ways to source the options: fixed values, variables, or command output.</p>"},{"location":"blocks/executable/dropdown/#option-sources","title":"Option Sources","text":"<p>The dropdown supports three different option sources:</p> <ol> <li>Fixed Options - Manually defined static options</li> <li>Variable Options - Options sourced from a template variable</li> <li>Command Output - Options dynamically generated from shell command output</li> </ol>"},{"location":"blocks/executable/dropdown/#fixed-options","title":"Fixed Options","text":"<p>Add options manually as simple values or label:value pairs for more user-friendly displays.</p> <pre><code>Simple Option\nUser Friendly Name:horrible-uuid-value\n</code></pre> <p>When using label:value pairs, users see the friendly label but the underlying value is stored and used in templates.</p>"},{"location":"blocks/executable/dropdown/#variable-options","title":"Variable Options","text":"<p>Reference a template variable containing newline or comma-separated values. The variable should contain the options list.</p> <pre><code>{{var.environment_list}}\n</code></pre>"},{"location":"blocks/executable/dropdown/#command-output","title":"Command Output","text":"<p>Execute a shell command that returns a list of options. Supports multiple interpreters (bash, python3, node) and can return label:value pairs.</p> <pre><code>kubectl get pods --no-headers | awk '{print $1}'\n</code></pre>"},{"location":"blocks/executable/dropdown/#template-usage","title":"Template Usage","text":"<p>The selected value can be accessed in other blocks using the variable name:</p> <pre><code>{{var.dropdown_name}}\n</code></pre> <p>All input fields are first rendered by the templating system, allowing for flexible configuration.</p>"},{"location":"blocks/executable/env/","title":"Environment","text":""},{"location":"blocks/executable/env/#env","title":"Env","text":"<p>This contextual block allows you to set environment variables for all subsequent blocks</p>"},{"location":"blocks/executable/kubernetes/","title":"Kubernetes","text":""},{"location":"blocks/executable/kubernetes/#kubernetes","title":"Kubernetes","text":"<p>The Kubernetes block allows you to execute kubectl get commands and display the results in a formatted table directly within your runbook.</p>"},{"location":"blocks/executable/kubernetes/#operating-modes","title":"Operating Modes","text":"<p>The Kubernetes block supports two different modes:</p> <ol> <li>Preset Mode - Select from common kubectl get commands</li> <li>Custom Mode - Execute custom kubectl get commands</li> </ol>"},{"location":"blocks/executable/kubernetes/#preset-commands","title":"Preset Commands","text":"<p>Preset mode provides quick access to common kubectl get operations:</p> <ul> <li>Pods - List all pods in the namespace</li> <li>Services - List all services</li> <li>Deployments - List all deployments</li> <li>ConfigMaps - List all config maps</li> <li>Secrets - List all secrets</li> <li>Nodes - List all cluster nodes</li> <li>Namespaces - List all namespaces</li> </ul>"},{"location":"blocks/executable/kubernetes/#custom-commands","title":"Custom Commands","text":"<p>Custom mode allows you to execute kubectl get commands with custom parameters. Commands must return JSON output for proper parsing and table display.</p> <pre><code>kubectl get pods -l app=nginx -o json\n</code></pre>"},{"location":"blocks/executable/kubernetes/#context-and-namespace","title":"Context and Namespace","text":"<p>Configure the Kubernetes context and namespace for your commands:</p> <ul> <li>Context - Target Kubernetes cluster context</li> <li>Namespace - Target namespace (if applicable)</li> </ul>"},{"location":"blocks/executable/kubernetes/#auto-refresh","title":"Auto-refresh","text":"<p>Enable automatic command execution at configurable intervals to keep data current. Useful for monitoring resources that change frequently.</p>"},{"location":"blocks/executable/kubernetes/#template-usage","title":"Template Usage","text":"<p>All input fields support templating, allowing you to use variables in your commands:</p> <pre><code>kubectl get pods -n {{var.target_namespace}}\n</code></pre>"},{"location":"blocks/executable/kubernetes/#future-enhancements","title":"Future Enhancements","text":"<p>Currently, the Kubernetes block focuses on <code>kubectl get</code> operations for resource inspection and monitoring. We plan to expand Kubernetes functionality in future releases to include:</p> <ul> <li>Resource creation and modification operations</li> <li>Advanced kubectl commands (apply, delete, patch, etc.)</li> <li>Helm chart management</li> <li>Additional output formats beyond JSON</li> </ul>"},{"location":"blocks/executable/script/","title":"Script","text":""},{"location":"blocks/executable/script/#script","title":"Script","text":"<p>The script block is a lot like a terminal block, except non-interactive. This is essentially your normal bash script, with some superpowers. Script blocks run without user interaction, making them perfect for automation and batch processing.</p>"},{"location":"blocks/executable/script/#supported-interpreters","title":"Supported Interpreters","text":"<p>We support several different interpreters with the script block. While we default to <code>zsh</code>, we also support running code with the following:</p> <ol> <li>bash - Standard Unix shell scripting</li> <li>python3 - Python scripts for data processing and automation  </li> <li>node - JavaScript/Node.js for web API interactions</li> </ol> <p>The current in-use interpreter can be changed via the dropdown in the top right of the block.</p>"},{"location":"blocks/executable/script/#variables","title":"Variables","text":"<p>The output of a script block can be captured as a variable, and reused as input for other blocks. All input fields in all blocks are templated.</p> <p>Set the \"output variable\" name in the header of the block. You can refer to the variable with the following syntax:</p> <pre><code>{{var.variable_name}}\n</code></pre> <p>See the templating section for full information on template variables.</p>"},{"location":"blocks/executable/terminal/","title":"Terminal","text":""},{"location":"blocks/executable/terminal/#terminal","title":"Terminal","text":"<p>The Terminal block provides a fully functional, interactive shell directly within your Runbook. It behaves just like your local terminal, respecting your system configuration, environment variables, and shell preferences.</p> <p>To execute a command, simply type it into the code input field and hit the play button. </p> <p>The terminal processes your input just as if you had typed it directly into your shell. Everything runs in the background, so you can navigate away, continue editing your Runbook, or collaborate with others while your command executes.</p> <p>Everything within the input box is fed as input for the terminal, so interactive sessions can be nested as deep as you'd like. There is much more flexibility here than a normal bash script, with the following caveats</p> <ol> <li>We cannot detect when a command within a terminal ends - we hope to have this resolved soon, but there's an additional layer of complexity here</li> <li>Output cannot be captured. As we are emulating a terminal, the output contains a multitude of control codes, prompt output, etc. If you'd like to work with the output of a shell command, we recommend using a script block.</li> <li>Terminals are slower than scripts. Because we're spinning up a new pseudo-terminal in the background, startup time and resource usage will be a bit higher than a script</li> <li>Interactive input can sometimes feel unnatural, and the scripting process is different than writing a bash script</li> </ol>"},{"location":"blocks/executable/variable/","title":"Variable","text":""},{"location":"blocks/executable/variable/#variable","title":"Variable","text":"<p>The variable system supports three different types of variables, each with different scoping and synchronization behavior.</p>"},{"location":"blocks/executable/variable/#template-variables-var-block","title":"Template Variables (Var Block)","text":"<p>Template variables are synced across all collaborators in real-time. These are the primary variable type for shared runbook state.</p> <ul> <li>Synchronization: Changes are immediately visible to all collaborators</li> <li>Persistence: Stored with the runbook document  </li> <li>Scope: Available throughout the entire runbook</li> <li>Use case: Shared configuration, user inputs, persistent state</li> </ul> <p>Variables can be set with a name and value. The value field supports full templating syntax, allowing you to build variables from other variables or block outputs.</p>"},{"location":"blocks/executable/variable/#local-variables-local-var-block","title":"Local Variables (Local Var Block)","text":"<p>Local variables are not synced and remain private to each user's session.</p> <ul> <li>Synchronization: Private to individual users, not shared</li> <li>Persistence: Lost when the session ends</li> <li>Scope: Available throughout the runbook for that user only</li> <li>Use case: User-specific settings, temporary calculations, private credentials</li> </ul>"},{"location":"blocks/executable/variable/#variable-display","title":"Variable Display","text":"<p>Use the Variable Display block to view all currently set variables and their values. This shows both template (synced) and local (not synced) variables for debugging and state inspection.</p>"},{"location":"blocks/executable/variable/#usage","title":"Usage","text":"<p>Both variable types can be referenced using the same template syntax:</p> <pre><code>{{var.variable_name}}\n</code></pre>"},{"location":"blocks/executable/variable/#template-integration","title":"Template Integration","text":"<p>All variable blocks integrate with the templating system, enabling complex variable manipulation and conditional logic.</p>"},{"location":"blocks/monitoring/","title":"Monitoring Blocks","text":""},{"location":"blocks/monitoring/#monitoring-blocks","title":"Monitoring Blocks","text":"<p>We're building out a catalogue of monitoring blocks. These enable you to keep an eye on what is happening with your systems, while you run queries and commands against them.</p> <p>Real-time Monitoring</p> <p>These blocks provide real-time insights into your systems' health and performance metrics.</p>"},{"location":"blocks/monitoring/#available-monitoring-blocks","title":"Available Monitoring Blocks","text":"<ul> <li> <p> Prometheus</p> <p>Query Prometheus metrics and create custom monitoring dashboards.</p> <p> Learn more</p> </li> </ul>"},{"location":"blocks/monitoring/prometheus/","title":"Prometheus","text":""},{"location":"blocks/monitoring/prometheus/#prometheus","title":"Prometheus","text":"<p>Use the Prometheus block to display a time series from a remote Prometheus server.</p> <p>The server address can be configured in two ways</p> <ol> <li>From the block settings</li> <li>From the Atuin Desktop settings</li> </ol> <p>This allows you to set a default endpoint, and then override it per-chart.</p>"},{"location":"blocks/network/","title":"Network Blocks","text":""},{"location":"blocks/network/#network-blocks","title":"Network Blocks","text":"<p>Network blocks make exploring external systems and services easy. These blocks help you interact with remote services, APIs, and systems over the network.</p> <p>External Integrations</p> <p>Network blocks are perfect for API testing, system monitoring, and remote operations.</p>"},{"location":"blocks/network/#available-network-blocks","title":"Available Network Blocks","text":"<ul> <li> <p> HTTP</p> <p>Make HTTP requests to APIs and web services with full control over headers and methods.</p> <p> Learn more</p> </li> <li> <p> SSH</p> <p>Execute commands on remote systems securely via SSH connections.</p> <p> Learn more</p> </li> </ul>"},{"location":"blocks/network/http/","title":"HTTP","text":""},{"location":"blocks/network/http/#http","title":"HTTP","text":"<p>The HTTP block allows you to make HTTP requests to APIs, web services, and external systems. The HTTP block supports all standard HTTP methods: GET, POST, PUT, DELETE, PATCH, HEAD, and OPTIONS.</p>"},{"location":"blocks/network/http/#template-usage","title":"Template Usage","text":"<p>All input fields are first rendered by the templating system, allowing for flexible configuration. When combined with the script block, we can access local credentials to interact with APIs securely.</p> <p>HTTP responses can be captured as variables and used in subsequent blocks for processing or display.</p> <p>Authentication</p> <p>For APIs requiring authentication, consider using environment variables or the secrets system to manage API keys and tokens securely.</p>"},{"location":"blocks/network/ssh/","title":"SSH","text":""},{"location":"blocks/network/ssh/#ssh","title":"SSH","text":"<p>SSH is another \"contextual\" block - just like setting a directory or environment variable.</p> Example SSH usage Example SSH usage <p>Insert an SSH block, and fill in the host. All following terminal or script blocks will now execute on the remote machine. If the block is going to execute on a remote machine, it will be outlined in blue.</p>"},{"location":"blocks/network/ssh/#authentication","title":"Authentication","text":"<p>We do not yet support specifying authentication, and only connect using the local SSH agent. Tailscale SSH works as expected.</p>"},{"location":"blocks/network/ssh/#running-locally","title":"Running locally","text":"<p>If you wish to revert back to local execution, insert a \"host\" block.</p> Example SSH usage Example SSH usage <p>In the future, the host block will support toggling between different connected machines. Right now, it only supports localhost</p>"},{"location":"blocks/network/ssh/#connection-pooling","title":"Connection pooling","text":"<p>Our SSH integration will only open a single SSH connection, and multiplex multiple sessions through it. This means that once connected, block execution will feel fast + low latency</p>"},{"location":"hub/collaborative-editing/","title":"Collaborative Editing","text":""},{"location":"hub/collaborative-editing/#collaborative-editing","title":"Collaborative Editing","text":"<p>The Desktop app supports real-time collaborative editing. Once you've created a Runbook in an online workspace, you can collaborate on it via one of two methods.</p>"},{"location":"hub/collaborative-editing/#single-user-collaboration","title":"Single-User Collaboration","text":"<p>You can invite individual users to collaborate on your runbook using the Runbook settings, accessible via the cog icon in the top-right corner.</p> <p>Collaborators can see and modify your Runbook, but they cannot change sharing settings, and they cannot add or remove published tags.</p>"},{"location":"hub/collaborative-editing/#team-based-collaboration","title":"Team-Based Collaboration","text":"<p>If you collaborate with a number of people regularly, you may want to create an organization on the Hub. Select the \"Organizations\" tab on your profile page to create an organization.</p> Create an organization from the \"Organizations\" tab on your profile page Create an organization from the \"Organizations\" tab on your profile page <p>Once you've created an organization, you can invite users to join. Every user will have the organization listed as an option in their organization selector at the top of the left sidebar in the Desktop app, and any online workspaces that exist within the org will automatically be available to other organization members.</p>"},{"location":"hub/getting-started/","title":"Getting Started","text":""},{"location":"hub/getting-started/#getting-started","title":"Getting Started","text":"<p>Atuin Hub (also referred to as \"the Hub\") is the a website for sharing and collaborating on Runbooks. To get started, register at https://hub.atuin.sh using a username and password, or one of our third-party auth providers.</p>"},{"location":"hub/getting-started/#logging-into-the-desktop-app","title":"Logging into the Desktop app","text":"<p>To log into your Hub account in the Desktop app, click the avatar icon in the lower-left corner of the app and choose the \"Log in\" option.</p> <p>The app will open your default browser to the Desktop Connect page, where you can click a button to open the app and log in, or copy your API key and log in manually via the settings menu in the app.</p>"},{"location":"hub/sharing-runbooks/","title":"Sharing Runbooks","text":""},{"location":"hub/sharing-runbooks/#sharing-runbooks","title":"Sharing Runbooks","text":"<p>Once you're logged in in the Desktop app, you can create online workspaces. Any Runbook you create will automatically be synced to Atuin Hub with a visibility of \"private,\" meaning only you can access it.</p> <p>To change the slug (which determines the Runbook's URL) or visibility, click the settings gear in the top-right corner of the app.</p> <ul> <li>Public - anyone can see your Runbook</li> <li>Unlisted - only people with the Runbook URL can see your Runbook</li> <li>Private - only you and people you invite to collaborate can see your Runbook</li> </ul> <p>After you've shared your Runbook to Atuin Hub, it will appear on your profile page. You can update the sharing settings or invite other users to collaborate on your Runbook using the same UI (non-org Runbooks only).</p>"}]}